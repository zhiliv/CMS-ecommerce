import * as fs from 'fs' // –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
import * as path from 'path'

const startPath = '../components' // –ø—É—Ç—å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

/*
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫ —Ñ–∞–π–ª—É
 * @function flatten
 * @param {Array} lists - –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
 */
const flatten = lists => lists.reduce((a, b) => a.concat(b), [])

/*
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
 * @function getDirectories
 * @param {String} srcpath - –ü—É—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç—Ä–∏–π
 */
const getDirectories = srcpath =>
  fs
    .readdirSync(srcpath)
    .map(file => path.join(srcpath, file))
    .filter(path => fs.statSync(path).isDirectory())

/*
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 * @function getDirectoriesRecursive
 * @param {String} srcpath - –ü—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞
 */
const getDirectoriesRecursive = srcpath => [srcpath, ...flatten(getDirectories(srcpath).map(getDirectoriesRecursive))]

let ListDirectory = getDirectoriesRecursive(startPath)
if (ListDirectory && ListDirectory.length)
  ListDirectory = ListDirectory.map(path => `${path.replace(/\\/g, '/')}/*.vue`) // –∑–∞–º–µ–Ω–∞ –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
;(async function () {
  const result = [] // —Ä–∞–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤
  ListDirectory.forEach(async namePath => {
    const obj = {} // –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    let pathComponent = namePath.replace(startPath, '') // –∑–∞–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    pathComponent = pathComponent.substr(1, pathComponent.length - 1) // —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–ª—ç—à–∞
    pathComponent = pathComponent.replace(/\*.vue/g, '') // —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ vue
    const arrPathComponent = pathComponent.split('/') // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–µ–ª–∏—Ç—Å—è —Å–ª—ç—à–∞–º–∏
    let strComponentName = arrPathComponent.join('-') // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    strComponentName = strComponentName.substr(0, strComponentName.length - 1) // —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª —Ç–∏—Ä–µ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    if (strComponentName) {
      pathComponent = namePath.replace(/\*.vue/g, `${arrPathComponent[arrPathComponent.length - 2]}.vue`) // –∑–∞–º–µ–Ω–∞ *.vue –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞
      let data // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      if (fs.existsSync(pathComponent)) data = await fs.readFileSync(pathComponent).toString() // –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç
      if (data) {
        let strProps = data.match(/props: {([^}]*)}/) // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ props
        if (strProps && strProps[0]) {
          // –µ—Å–ª–∏ –¥–∞–Ω–Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          strProps = strProps[0].indexOf('validator') === -1 ?  `{${strProps[0]}}}` : `{${strProps[0]}}}}`
          let setQuote = strProps
            .replace(/([\$\w]+)\s*:/g, (_, $1) => '"' + $1 + '":') // –æ–±–µ—Ä—Ç–∫–∞ –≤ –∫–∞–≤—ã—á–∫–∏ –∫–ª—é—á–∞
            .replace(/: ([A-Za-z0-9]+)/g, (_, $1) => ': "' + $1 + '"') // –æ–±–µ—Ä—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ –∫–∞–≤—ã—á–∫–∏
            .replace(/''/g, '""') // –∑–∞–º–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
            .replace(/[\r\n ]+/g, '')

            const delComment = setQuote.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm, '') // —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            console.log('üöÄ -> strProps=strProps[0].indexOf -> delComment', delComment)
            let arr = delComment.match(/"([\$\w]+)\s*":/g)
            if(arr.length){
              arr.forEach(el => {
                if(el !== 'props:'){
                  const regexp = `/validator(value)/`
                  const regex2 = new RegExp(`validator(value){([^}]*)}`, 'g');
                  console.log('üöÄ -> regex2', regex2)
                  // console.log('üöÄ -> regexp', regexp)
                  let t = delComment.match(regex2)
                  console.log(t)
                }

              })
            }
            // console.log('üöÄ -> strProps=strProps[0].indexOf -> test', test)
            // const delValidator =
             //  onsole.log('üöÄ -> setQuote', delComment.match(/validator\(value\){([^}]*)}/)) //! –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ª–∏–¥–∞—Ü–∏–∏
          // console.log(/\/*/.test(setQuote))
        }
      }
    }

    //
  })
})()




